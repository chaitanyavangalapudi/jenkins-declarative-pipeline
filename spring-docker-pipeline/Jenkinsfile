pipeline {
    agent any

    environment {
    // Store the URL and location of Private Docker Registry like Nexus or GitLab or your own registry
        DOCKER_REGISTRY= "https://privatedocker.iggi.com:8080"
        DOCKER_REGISTRY1= "privatedocker.iggi.com:8080"
        DOCKER_REGISTRY_CRED="nexusDeploymentCred" 
        IMAGE_NAME="spring-boot-demo:${BUILD_NUMBER}"
    }

    options {
      buildDiscarder(logRotator(numToKeepStr: '15', daysToKeepStr: '15',  artifactNumToKeepStr: '5', artifactDaysToKeepStr: '15'))
      gitLabConnection('GitlabConn')
      ansiColor('xterm')
    }
    triggers {
        gitlab(
          triggerOnPush: true,
          triggerOnMergeRequest: true,
          triggerOpenMergeRequestOnPush: "never",
          triggerOnNoteRequest: true,
          noteRegex: "Jenkins please retry a build",
          skipWorkInProgressMergeRequest: true,
          ciSkip: false,
          setBuildDescription: true,
          addNoteOnMergeRequest: true,
          addCiMessage: true,
          addVoteOnMergeRequest: true,
          acceptMergeRequestOnSuccess: false,
          //pendingBuildName: "Jenkins",
          cancelPendingBuildsOnUpdate: false,
          branchFilterType: 'All')
    }

    stages {
        stage('Checkout Code from SCM') {
            steps {
              updateGitlabCommitStatus name: 'build', state: 'running'
              emailext (
                to: "userfname.lastname@iggi.com",
                subject: "BUILD STARTED: Job '${env.JOB_NAME} # ${env.BUILD_NUMBER}'",
                body: """<p>STARTED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
                  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} # ${env.BUILD_NUMBER}</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
              )
              checkout scm
            }
        }
        stage('Build') {
            steps {
               sh '''
                  mvn -B -DskipTests clean package
               '''
            }
        }
        stage('Run Tests and Analyze Code') {
          parallel {
           stage('Run Unit Tests') {
              steps {
                sh '''
                   mvn test
                '''
              }
              post {
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
              }
            }
            stage('Run Integration Tests') {
              steps {
                   echo "Place Holder for Integration Test"
              }
            }
            stage('Perform Static Code Analysis') {
              steps {
                  echo "Place Holder for Static code analysis"
              }
            }
          }
        }
        stage('Build Docker Image') {
            when {
              branch 'release'
            }
            steps {
              script {
               dockerImage = docker.build(IMAGE_NAME)
              }
            }
        }
        stage('Push Docker Image to Registry') {
            when {
               branch 'release'
            }
            steps {
              script {
                 docker.withRegistry( DOCKER_REGISTRY, DOCKER_REGISTRY_CRED) {
                   dockerImage.push()
                   dockerImage.push('latest')
                 }
              }
            }
        }
        stage('Clean up Local Docker Image on Jenkins') {
            when {
              branch 'release'
            }
            steps {
              sh "docker rmi -f $DOCKER_REGISTRY1/$IMAGE_NAME"
            }
        }
        stage('Promotion Prompt') {
            when {
               branch 'release'
            }
            steps {
                timeout(time: 6, unit:'HOURS') {
                    input 'Deploy Application?'
                }
            }
        }
        stage('Deploy SpringBoot Application') {
          when {
              branch 'release'
          }
          steps {

            script {
               def remote = [:]
               remote.name = "deployment.iggi.com"
               remote.host = "deployment.iggi.com"
               remote.allowAnyHosts = true
               withCredentials([sshUserPrivateKey(credentialsId: 'JenkinsPrivateKey', keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'userName')]) {
                      remote.user = userName
                      remote.passphrase = passphrase
                      remote.identityFile = identity

                      sshPut remote: remote, from: 'docker-compose.yml', into: '/app/springboot'
                      sshPut remote: remote, from: 'deployDockerizedApp.sh', into: '/app/springboot'
                      sshCommand remote: remote, command: 'chmod 755 /app/springboot/deployDockerizedApp.sh', failOnError: 'true'
                      sshCommand remote: remote, command: '/app/springboot/deployDockerizedApp.sh', failOnError: 'true'
               }
            }

          }
      }
    }
    post {
       failure {
         emailext (
            to: "userfname.lastname@iggi.com",
            subject: "Build FAILED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}'",
            from: "noreply@iggi.com",
            body: """<p>FAILED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.BUILD_URL}</a>&QUOT;</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
          )
          updateGitlabCommitStatus name: 'build', state: 'failed'
       }
       success {
          emailext (
            to: "userfname.lastname@iggi.com",
            subject: "Build SUCCESSFUL: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}'",
            from: "noreply@iggi.com",
            body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.BUILD_URL}</a>&QUOT;</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
          )
          updateGitlabCommitStatus name: 'build', state: 'success'
       }
       always {
          cleanWs()
       }
    }
}
