pipeline {
    agent any

    environment {
        TEMP ="dist.${JOB_NAME}-${BUILD_ID}.tar.gz"
        ANGULAR_DIST_ARCHIVE=TEMP.replaceAll("/","-")
    }
    // Preconfigured Node version 11.2.0 in Jenkins Global Tools
    tools {nodejs "11.2.0"}

    options {
      buildDiscarder(logRotator(numToKeepStr: '15', daysToKeepStr: '15',  artifactNumToKeepStr: '5', artifactDaysToKeepStr: '15'))
      gitLabConnection('GitlabConnection')
      ansiColor('xterm')
    }
    triggers {
        gitlab(
          triggerOnPush: true,
          triggerOnMergeRequest: true,
          triggerOpenMergeRequestOnPush: "never",
          triggerOnNoteRequest: true,
          noteRegex: "Jenkins please retry a build",
          skipWorkInProgressMergeRequest: true,
          ciSkip: false,
          setBuildDescription: true,
          addNoteOnMergeRequest: true,
          addCiMessage: true,
          addVoteOnMergeRequest: true,
          acceptMergeRequestOnSuccess: false,
          cancelPendingBuildsOnUpdate: false,
          branchFilterType: 'All')
    }

    stages {
        stage('Checkout Code from SCM') {
            steps {
             echo "Pulling Code from Branch: ${env.BRANCH_NAME}" 
             updateGitlabCommitStatus name: 'build', state: 'running'
              emailext (
                to: "fname.lastname@iggi.com",
                subject: "BUILD STARTED: Job '${env.JOB_NAME} # ${env.BUILD_NUMBER}'",
                body: """<p>STARTED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
                  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} # ${env.BUILD_NUMBER}</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
              )
             checkout scm
            }
        }
        stage('NPM Setup - install Node modules') {
            steps {
              sh 'npm config ls'
              sh '''
                   node --version
                   npm install --verbose -d 
              '''
            }
        }
        stage('Code Quality Check') {
            steps {
                sh '$(npm bin)/ng lint --force=true'
            }
        }
        stage('Angular Build') {
            steps {
                  echo "Build started..."
                  //sh '$(npm bin)/ng build --prod --build-optimizer'
                  //sh '$(npm bin)/ng build --aot --build-optimizer'
                  sh '$(npm bin)/ng --version'
                  sh '''
                    $(npm bin)/ng build --prod
                  '''
                  stash includes: 'dist/', name: 'angular-app'
            }
        }
        stage('Generate dist and archive for Release branch') {
          when {
              branch 'release'
          }
         steps{
           dir("$WORKSPACE/my_app"){ 
             unstash 'angular-app'
           }
           echo "${ANGULAR_DIST_ARCHIVE}"
           sh 'tar -cvzf ${ANGULAR_DIST_ARCHIVE} --strip-components=1 dist'
           archiveArtifacts  "**/*.tar.gz"
         }
       }
        stage('Deployment prompt') {
            when {
              branch 'release'
            }
            steps {
                echo "Deployment prompt for ${env.BRANCH_NAME} branch"
                timeout(time: 6, unit:'HOURS') {
                   input 'Deploy Angular application?'
                }
            }
        }
        stage('Deploy Angular Application') {
          when {
              branch 'release'
          }
          steps {
             //milestone()
             script {
                def remote = [:]
                def fileName = "${ANGULAR_DIST_ARCHIVE}"
                remote.name = "deployment.iggi.com"
                remote.host = "deployment.iggi.com"
                remote.allowAnyHosts = true
                withCredentials([sshUserPrivateKey(credentialsId: 'JenkinsPrivateKey', keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'userName')]) {
                      remote.user = userName
                      remote.passphrase = passphrase
                      remote.identityFile = identity

                      sshPut remote: remote, from: fileName, into: '/app/angular'
                      sshPut remote: remote, from: './deploy.sh', into: '/app/angular'
                      sshCommand remote: remote, command: '/app/angular/deploy.sh', failOnError: 'true'
                }
             }
         }
      }
    }
    post {
       failure {
           emailext (
            to: "fname.lastname@iggi.com",
            subject: "Build FAILED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}'",
            from: "noreply@iggi.com",
            body: """<p>FAILED: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.BUILD_URL}</a>&QUOT;</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
          )
          updateGitlabCommitStatus name: 'build', state: 'failed'
       }
       success {
         emailext (
            to: "fname.lastname@iggi.com",
            subject: "Build SUCCESSFUL: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}'",
            from: "noreply@iggi.com",
            body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} Build # ${env.BUILD_NUMBER}':</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.BUILD_URL}</a>&QUOT;</p>
              <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
          )
          updateGitlabCommitStatus name: 'build', state: 'success'
       }
       cleanup {
         cleanWs()
       }
    }
}
